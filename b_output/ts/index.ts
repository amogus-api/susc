/* Generated by AMOGUS SUS (https://github.com/portasynthinca3/amogus)
 * Project name: b
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the “Software”), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import * as amogus from "amogus-driver";

// Represents connection states
export enum State {
	normal = 255,
}
export const State_SIZE = 1;


// Represents operation error codes
export enum ErrorCode {
	// Global method got invoked in an unsupported connection state
	invalid_state = 65535,
	// Field value validation failed
	validation_failed = 65534,
	// Rate limit got exceeded
	rate_limit = 65533,
	// Confirmation check failed
	confirmation_failed = 65532,
	// EntityGet failed (invalid ID)
	invalid_id = 65531,
	// EntityGet failed (failed to apply modifiers)
	invalid_get_modifier = 65530,
	// EntityUpdate failed
	invalid_entity = 65529,
}
export const ErrorCode_SIZE = 2;



export const specSpace = {
	specVersion: 1,
	globalMethods: {
	},
	entities: {
	},
	confirmations: {
	}
};



export function bind(session: amogus.session.Session) {
	return {
		session,
		/*** METHODS ***/


		/*** ENTITIES ***/


		/*** ENUMS AND BITFIELDS ***/

		// Represents connection states
		State,
		// Represents operation error codes
		ErrorCode,
	};
}
